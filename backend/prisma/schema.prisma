generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  passwordHash  String   @map("password_hash")
  nombre        String
  apellido      String?
  telefono      String?
  fechaNac      DateTime? @map("fecha_nacimiento")
  genero        String?
  rol           String   @default("cliente")
  activo        Boolean  @default(true)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  perfilesFisicos    PerfilFisico[]
  fotosProgreso      FotoProgreso[]
  objetivos          Objetivo[]
  rutinas            Rutina[]
  planesNutricionales PlanNutricional[]
  entrenamientos     Entrenamiento[]
  comidas            RegistroComida[]
  mensajesChat       MensajeChat[]

  @@map("users")
}

model PerfilFisico {
  id               String   @id @default(uuid())
  userId           String   @map("user_id")
  altura           Float
  peso             Float
  imc              Float?
  porcentajeGrasa  Float?   @map("porcentaje_grasa")
  masaMuscular     Float?   @map("masa_muscular")
  circunferenciaBrazo  Float? @map("circunferencia_brazo")
  circunferenciaPecho  Float? @map("circunferencia_pecho")
  circunferenciaCintura Float? @map("circunferencia_cintura")
  circunferenciaCadera  Float? @map("circunferencia_cadera")
  circunferenciaMuslo   Float? @map("circunferencia_muslo")
  notas            String?
  createdAt        DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("perfiles_fisicos")
}

model FotoProgreso {
  id              String   @id @default(uuid())
  userId          String   @map("user_id")
  fotoFrenteUrl   String   @map("foto_frente_url")
  fotoLateralUrl  String   @map("foto_lateral_url")
  fotoEspaldaUrl  String   @map("foto_espalda_url")
  mediciones      Json?
  analisisIA      Json?    @map("analisis_ia")
  peso            Float?
  createdAt       DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("fotos_progreso")
}

model Objetivo {
  id                String   @id @default(uuid())
  userId            String   @map("user_id")
  objetivoPrincipal String   @map("objetivo_principal")
  pesoObjetivo      Float?   @map("peso_objetivo")
  fechaObjetivo     DateTime? @map("fecha_objetivo")
  nivelActividad    String   @map("nivel_actividad")
  diasSemana        Int      @map("dias_semana")
  nivelExperiencia  String   @map("nivel_experiencia")
  limitaciones      String?
  preferencias      String?
  activo            Boolean  @default(true)
  createdAt         DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("objetivos")
}

model Rutina {
  id              String   @id @default(uuid())
  userId          String   @map("user_id")
  nombre          String
  descripcion     String?
  diasSemana      Int      @map("dias_semana")
  duracionSemanas Int      @map("duracion_semanas")
  nivelDificultad String   @map("nivel_dificultad")
  ejercicios      Json
  generadaPorIA   Boolean  @default(true) @map("generada_por_ia")
  activa          Boolean  @default(true)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  entrenamientos Entrenamiento[]

  @@map("rutinas")
}

model Entrenamiento {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  rutinaId    String   @map("rutina_id")
  fecha       DateTime @default(now())
  completado  Boolean  @default(false)
  duracion    Int?
  ejercicios  Json
  notas       String?
  createdAt   DateTime @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  rutina Rutina @relation(fields: [rutinaId], references: [id])

  @@map("entrenamientos")
}

model PlanNutricional {
  id                String   @id @default(uuid())
  userId            String   @map("user_id")
  nombre            String
  caloriasDiarias   Int      @map("calorias_diarias")
  proteinas         Float
  carbohidratos     Float
  grasas            Float
  comidas           Json
  restricciones     String?
  preferencias      String?
  generadoPorIA     Boolean  @default(true) @map("generado_por_ia")
  activo            Boolean  @default(true)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  registrosComida RegistroComida[]

  @@map("planes_nutricionales")
}

model RegistroComida {
  id                  String   @id @default(uuid())
  userId              String   @map("user_id")
  planNutricionalId   String?  @map("plan_nutricional_id")
  fecha               DateTime @default(now())
  tipoComida          String   @map("tipo_comida")
  alimentos           Json
  caloriasTotal       Int      @map("calorias_total")
  proteinasTotal      Float    @map("proteinas_total")
  carbohidratosTotal  Float    @map("carbohidratos_total")
  grasasTotal         Float    @map("grasas_total")
  notas               String?
  createdAt           DateTime @default(now()) @map("created_at")

  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  planNutricional   PlanNutricional?  @relation(fields: [planNutricionalId], references: [id])

  @@map("registros_comida")
}

model MensajeChat {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  rol       String
  contenido String
  tokens    Int?
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("mensajes_chat")
}